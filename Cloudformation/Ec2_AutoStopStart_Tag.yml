---
AWSTemplateFormatVersion: 2010-09-09
Description: This template creates Lambda functions, CloudWatch rules to Start and Stop the Ec2 as per the Cron expressions.

Parameters:
  Region:
    Type: String
    Default: us-east-1
  MemorySize:
    Type: String
    Default: 128
  Timeout:
    Type: String
    Default: 300
  Ec2TagKey:
    Type: String
    Default: "AutoOff"
    Description: Ec2 instance Tag key which will be used to start/stop the instances.
  Ec2TagValue:
    Type: String
    Default: "True"
    Description: Ec2 instance Tag value which will be used to start/stop the instances.
  InvokeAutoStartLambdaAt:
    Type: String
    Default: 'cron(30 10 ? * MON-FRI *)'
    Description: Cron Expression for Cloudwatch to start the Ec2.
  InvokeAutoStopLambdaAt:
    Type: String
    Default: 'cron(30 10 ? * MON-FRI *)'
    Description: Cron Expression for Cloudwatch to stop the Ec2.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "LambdaExecutionRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                  - ec2:StopInstances
                  - ec2:StartInstances
                Resource: '*'
######## Auto Start Ec2 ########
  AutoStartEc2InstancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "This Lambda function starts the Ec2 instance using Tag"
      FunctionName:
        Fn::Join:
          - ""
          - - !Ref AWS::StackName
            - "-Start"
      Handler: index.lambda_handler
      Runtime: 'python3.9'
      Timeout: !Ref Timeout
      MemorySize: !Ref MemorySize
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          region: !Ref Region
          Tag_Key: !Ref Ec2TagKey
          Tag_Value: !Ref Ec2TagValue
      Code:
        ZipFile: |
          import os
          import boto3
          import logging

          #setup simple logging for INFO
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          #define the connection
          ec2 = boto3.resource('ec2')

          def lambda_handler(event, context):
              # Use the filter() method of the instances collection to retrieve
              # all running EC2 instances.
              Tag_Key = os.environ['Tag_Key']
              Tag_Value = os.environ['Tag_Value']
              filters = [{
                      'Name': 'tag:'+ str(Tag_Key),
                      'Values': [str(Tag_Value)]
                  },
                  {
                      'Name': 'instance-state-name',
                      'Values': ['stopped']
                  }
              ]
              #filter the instances
              instances = ec2.instances.filter(Filters=filters)
              #locate all running instances
              RunningInstances = [instance.id for instance in instances]
              print(RunningInstances)
              #make sure there are actually instances to shut down.
              if len(RunningInstances) > 0:
                  #perform the shutdown
                  startinstances = ec2.instances.filter(InstanceIds=RunningInstances).start()
                  print(startinstances)
              else:
                  print("No instances to start!!")
    DependsOn:
    - LambdaExecutionRole
  AutoStartEc2InstanceRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "This CloudWatch rule invokes the Lambda Function to Start the instances."
      ScheduleExpression: !Ref InvokeAutoStartLambdaAt
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt AutoStartEc2InstancesLambdaFunction.Arn
          Id: "AutoStartEc2InstanceRule"
    DependsOn: AutoStartEc2InstancesLambdaFunction

  AutoStartEc2InstancesLambdaSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${AutoStartEc2InstancesLambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${AutoStartEc2InstanceRule.Arn}
    DependsOn: AutoStartEc2InstancesLambdaFunction
######## Auto Stop Ec2 ########
  AutoStopEc2InstancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "This Lambda function stop the Ec2 instance using Tag"
      FunctionName:
        Fn::Join:
          - ""
          - - !Ref AWS::StackName
            - "-Stop"
      Handler: index.lambda_handler
      Runtime: 'python3.9'
      Timeout: !Ref Timeout
      MemorySize: !Ref MemorySize
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          region: !Ref Region
          Tag_Key: !Ref Ec2TagKey
          Tag_Value: !Ref Ec2TagValue
      Code:
        ZipFile: |
          import os
          import boto3
          import logging

          #setup simple logging for INFO
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          #define the connection
          ec2 = boto3.resource('ec2')

          def lambda_handler(event, context):
              # Use the filter() method of the instances collection to retrieve
              # all running EC2 instances.
              Tag_Key = os.environ['Tag_Key']
              Tag_Value = os.environ['Tag_Value']
              filters = [{
                      'Name': 'tag:'+ str(Tag_Key),
                      'Values': [str(Tag_Value)]
                  },
                  {
                      'Name': 'instance-state-name',
                      'Values': ['running']
                  }
              ]
              #filter the instances
              instances = ec2.instances.filter(Filters=filters)
              #locate all running instances
              RunningInstances = [instance.id for instance in instances]
              print(RunningInstances)
              #make sure there are actually instances to shut down.
              if len(RunningInstances) > 0:
                  #perform the shutdown
                  shuttingDown = ec2.instances.filter(InstanceIds=RunningInstances).stop()
                  print(shuttingDown)
              else:
                  print("No instances to stop!!")
    DependsOn:
    - LambdaExecutionRole
  AutoStopEc2InstanceRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "This CloudWatch rule invokes the Lambda Function to Stop the instances."
      ScheduleExpression: !Ref InvokeAutoStopLambdaAt
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt AutoStopEc2InstancesLambdaFunction.Arn
          Id: "AutoStopEc2InstanceRule"
    DependsOn: AutoStopEc2InstancesLambdaFunction

  AutoStopEc2InstancesLambdaSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${AutoStopEc2InstancesLambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${AutoStopEc2InstanceRule.Arn}
    DependsOn: AutoStopEc2InstancesLambdaFunction
