---
AWSTemplateFormatVersion: 2010-09-09

Description: This template creates a lambda function for deleting the default VPC's in newly created account.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: DeleteVpcsLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ec2:Describe*
            - ec2:DetachInternetGateway
            - ec2:DeleteInternetGateway
            - ec2:DeleteSubnet
            - ec2:DeleteSecurityGroup
            - ec2:DeleteVpc
            Effect: Allow
            Resource: "*"
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      RoleName: 'DeleteDefaultVPCAWS'

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function for deleting default VPC's in newly created account"
      FunctionName: "DeleteDefaultVPCNewAccount"
      Handler: 'DeleteVPC.lambda_handler'
      Runtime: 'python3.9'
      Timeout: 900
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import os
          import os
          import boto3
          import time
          import json
          from botocore.exceptions import ClientError

          VERBOSE = 1

          def get_regions(client):
            """ Build a region list """
            reg_list = []
            regions = client.describe_regions()
            data_str = json.dumps(regions)
            resp = json.loads(data_str)
            region_str = json.dumps(resp['Regions'])
            region = json.loads(region_str)
            for reg in region:
              reg_list.append(reg['RegionName'])
            return reg_list

          def get_default_vpcs(client):
            vpc_list = []
            vpcs = client.describe_vpcs(
              Filters=[
                {
                    'Name' : 'isDefault',
                    'Values' : [
                      'true',
                    ],
                },
              ]
            )
            vpcs_str = json.dumps(vpcs)
            resp = json.loads(vpcs_str)
            data = json.dumps(resp['Vpcs'])
            vpcs = json.loads(data)

            for vpc in vpcs:
              vpc_list.append(vpc['VpcId'])

            return vpc_list

          def del_igw(ec2, vpcid):
            """ Detach and delete the internet-gateway """
            vpc_resource = ec2.Vpc(vpcid)
            igws = vpc_resource.internet_gateways.all()
            if igws:
              for igw in igws:
                try:
                  print("Detaching and Removing igw-id: ", igw.id) if (VERBOSE == 1) else ""
                  igw.detach_from_vpc(
                    VpcId=vpcid
                  )
                  igw.delete(
                    # DryRun=True
                  )
                except boto3.exceptions.Boto3Error as e:
                  print(e)

          def del_sub(ec2, vpcid):
            """ Delete the subnets """
            vpc_resource = ec2.Vpc(vpcid)
            subnets = vpc_resource.subnets.all()
            default_subnets = [ec2.Subnet(subnet.id) for subnet in subnets if subnet.default_for_az]

            if default_subnets:
              try:
                for sub in default_subnets:
                  print("Removing sub-id: ", sub.id) if (VERBOSE == 1) else ""
                  sub.delete(
                    # DryRun=True
                  )
              except boto3.exceptions.Boto3Error as e:
                print(e)

          def del_rtb(ec2, vpcid):
            """ Delete the route-tables """
            vpc_resource = ec2.Vpc(vpcid)
            rtbs = vpc_resource.route_tables.all()
            if rtbs:
              try:
                for rtb in rtbs:
                  assoc_attr = [rtb.associations_attribute for rtb in rtbs]
                  if [rtb_ass[0]['RouteTableId'] for rtb_ass in assoc_attr if rtb_ass[0]['Main'] == True]:
                    print(rtb.id + " is the main route table, continue...")
                    continue
                  print("Removing rtb-id: ", rtb.id) if (VERBOSE == 1) else ""
                  table = ec2.RouteTable(rtb.id)
                  table.delete(
                    # DryRun=True
                  )
              except boto3.exceptions.Boto3Error as e:
                print(e)

          def del_acl(ec2, vpcid):
            """ Delete the network-access-lists """
            vpc_resource = ec2.Vpc(vpcid)
            acls = vpc_resource.network_acls.all()

            if acls:
              try:
                for acl in acls:
                  if acl.is_default:
                    print(acl.id + " is the default NACL, continue...")
                    continue
                  print("Removing acl-id: ", acl.id) if (VERBOSE == 1) else ""
                  acl.delete(
                    # DryRun=True
                  )
              except boto3.exceptions.Boto3Error as e:
                print(e)

          def del_sgp(ec2, vpcid):
            """ Delete any security-groups """
            vpc_resource = ec2.Vpc(vpcid)
            sgps = vpc_resource.security_groups.all()
            if sgps:
              try:
                for sg in sgps:
                  if sg.group_name == 'default':
                    print(sg.id + " is the default security group, continue...")
                    continue
                  print("Removing sg-id: ", sg.id) if (VERBOSE == 1) else ""
                  sg.delete()
              except boto3.exceptions.Boto3Error as e:
                print(e)

          def del_vpc(ec2, vpcid):
            """ Delete the VPC """
            vpc_resource = ec2.Vpc(vpcid)
            try:
              print("Removing vpc-id: ", vpc_resource.id)
              vpc_resource.delete()
            except boto3.exceptions.Boto3Error as e:
                print(e)
                print("Please remove dependencies and delete VPC manually.")


          def lambda_handler(event, context):

              orgs = boto3.client('organizations')

              #make sure account is fully created, usually takes a few seconds
              time.sleep(20)

              #get case creation id
              createAccountId = event['detail']['responseElements']['createAccountStatus']['id']

              #get Account ID
              response = orgs.describe_create_account_status(CreateAccountRequestId=createAccountId)
              newAccountID = response['CreateAccountStatus']['AccountId']

              # Print the account ID
              print(newAccountID)

              client = boto3.client('ec2')
              regions = get_regions(client)
              print regions

              try:
                  try:

                      for region in regions:
                        sts_client = boto3.client('sts')
                        role = "arn:aws:iam::"+ newAccountID +":role/OrganizationAccountAccessRole"
                        print role
                        sessionId = "create-cross-account-roles"
                        sts_response = sts_client.assume_role(RoleArn=role, RoleSessionName=sessionId)

                        credentials = sts_response['Credentials']
                        vpc_client = boto3.client('ec2', aws_access_key_id=credentials['AccessKeyId'],
                                     aws_secret_access_key=credentials['SecretAccessKey'],
                                     aws_session_token=credentials['SessionToken'], region_name = region)

                        ec2 = boto3.resource('ec2', aws_access_key_id=credentials['AccessKeyId'],
                                     aws_secret_access_key=credentials['SecretAccessKey'],
                                     aws_session_token=credentials['SessionToken'], region_name = region)

                        vpcs = get_default_vpcs(vpc_client)
                        print(vpcs)
                        for vpc in vpcs:
                          print("\n" + "\n" + "REGION:" + region + "\n" + "VPC Id:" + vpc)
                          del_igw(ec2, vpc)
                          print(role)
                          del_sub(ec2, vpc)
                          del_rtb(ec2, vpc)
                          del_acl(ec2, vpc)
                          del_sgp(ec2, vpc)
                          del_vpc(ec2, vpc)

                  except ClientError as e:
                    print ("Unexpected Error:", e)
                    errorText = e.response['Error']['Message']
                    print ("Error Text: ", errorText)
                    pass
              except ClientError as e:
                  print e.message
    DependsOn:
    - LambdaExecutionRole

  CleanupEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "DetectAccountCreationToDeleteVPCs"
      Description: "Trigger Account created"
      State: ENABLED
      EventPattern: {
        "detail-type": [
          "AWS API Call via CloudTrail"
        ],
        "source": [
          "aws.organizations"
        ],
        "detail": {
          "eventSource": [
            "organizations.amazonaws.com"
          ],
          "eventName": [
            "CreateAccount"
          ]
        }
      }
      Targets:
        - Arn: !Sub ${LambdaFunction.Arn}
          Id: "CleanupEventRule"
    DependsOn: LambdaFunction
  #
  InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${LambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${CleanupEventRule.Arn}
    DependsOn: LambdaFunction
